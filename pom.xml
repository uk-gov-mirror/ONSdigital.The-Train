<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.github.davidcarboni</groupId>
    <artifactId>the-train</artifactId>
    <version>0.0.1-SNAPSHOT</version>


    <properties>
        <java.version>1.8</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <dp-logging.version>v2.0.0-beta.14</dp-logging.version>
        <jetty.version>9.4.57.v20241219</jetty.version>
    </properties>

    <repositories>
        <!--Jitpack io allows us include projects and libraries available on github but not built and published to maven central-->
        <!-- It is used for including internal project modules. See more on https://jitpack.io/-->
        <repository>
            <id>jitpack.io</id>
            <url>https://jitpack.io</url>
        </repository>
        <repository>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
            <id>central</id>
            <name>Central Repository</name>
            <url>https://repo.maven.apache.org/maven2</url>
        </repository>
    </repositories>

    <!--    Please remember the order of the entries in the dependencies section does matter to the maven build system. -->
    <!--    Restolino for example requires dp-logging and will load its own dp-logging version when dp-logging is not declared and loaded previously. -->
    <!--    Restolino particularly uses an older version of slf4j then dp-logging does. -->
    <!--    Maven would then not load slf4j in dp-logging when it has slf4j from Restolino as it realises it already loaded it. -->
    <!--    Maven seems not to check the library version for transient dependencies here!-->
    <!--    We found that dp-logging had a library missing org.slf4j which required all java applications to add this dependency so that they would work. What we did is we added this dependency in dp-logging to be pulled in from there and avoid having to include it in every application. However, restolino is also using org.slf4j but an older version of slf4j-api since we are only doing minor updates. By changing the order of dependencies and putting dp-logging above restolino the build then worked as it's using version 2.0.10 which is being pulled from dp-logging.-->
    <dependencies>
        <!-- Please don't move logging further down - order of dependencies does matter-->

        <dependency>
            <groupId>com.github.onsdigital</groupId>
            <artifactId>dp-logging</artifactId>
            <version>${dp-logging.version}</version>
        </dependency>
        <dependency>
            <groupId>com.sparkjava</groupId>
            <artifactId>spark-core</artifactId>
            <version>2.9.4</version>
        </dependency>
        <!-- com.sparkjava spark-core is EOL. The dependencies below are declared
          to override jetty dependencies brought in by it. -->
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-server</artifactId>
            <version>${jetty.version}</version>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty.websocket</groupId>
            <artifactId>websocket-server</artifactId>
            <version>${jetty.version}</version>
        </dependency>
        <!-- end spark-core overridden dependencies -->

        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>2.10.1</version>
        </dependency>

        <!-- http -->
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <version>4.5.14</version>
        </dependency>
        <dependency>
            <groupId>commons-fileupload</groupId>
            <artifactId>commons-fileupload</artifactId>
            <version>1.6.0</version>
        </dependency>
        <dependency>
            <groupId>com.github.onsdigital</groupId>
            <artifactId>encrypted-file-upload</artifactId>
            <version>2.3.0</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>2.16.1</version>
        </dependency>

        <!-- Encryption -->
        <dependency>
            <groupId>com.github.onsdigital</groupId>
            <artifactId>dp-cryptolite-java</artifactId>
            <version>1.5.1</version>
            <exclusions>
                <exclusion>
                    <groupId>org.bouncycastle</groupId>
                    <artifactId>bcprov-jdk15on</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- Commons -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.14.0</version>
        </dependency>
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>2.15.1</version>
        </dependency>
        <dependency>
            <groupId>com.github.onsdigital</groupId>
            <artifactId>resource-utils</artifactId>
            <version>resource-utils-1.2.3</version>
        </dependency>

        <!-- Test -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13.2</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-all</artifactId>
            <version>1.10.19</version>
            <scope>test</scope>
        </dependency>


    </dependencies>

    <build>

        <resources>
            <!-- Standard resources -->
            <resource>
                <directory>src/main/resources</directory>
            </resource>
            <!-- Your static content - this will end up in target/web/ -->
            <resource>
                <directory>src/main/web</directory>
                <targetPath>${project.build.directory}/web</targetPath>
            </resource>
        </resources>

        <plugins>

            <!-- Java 1.8 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.12.1</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>

            <!-- An assembly that includes all dependencies for deployment: -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>3.6.0</version>
                <configuration>
                    <descriptorRefs>
                        <descriptorRef>jar-with-dependencies</descriptorRef>
                    </descriptorRefs>
                    <archive>
                        <manifest>
                            <!--<mainClass>com.github.davidcarboni.restolino.Main</mainClass>-->
                            <mainClass>com.github.onsdigital.thetrain.App</mainClass>
                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                            <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
                        </manifest>
                    </archive>
                </configuration>
                <executions>
                    <execution>
                        <id>make-assembly</id>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- A folder of dependencies is used in development when reloading classes: -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>3.6.1</version>
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <!-- Default output folder is ${project.build.directory}/dependency -->
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.sonatype.ossindex.maven</groupId>
                <artifactId>ossindex-maven-plugin</artifactId>
                <version>3.2.0</version>
                <executions>
                    <execution>
                        <id>audit-dependencies-critical</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>audit</goal>
                        </goals>
                    </execution>
                </executions>
                <!-- configuration for mvn ossindex:audit -->
                <configuration>
                    <!-- if CVSS >= 7.0 (high or critical) then ERROR else WARN -->
                    <authId>ossindex</authId>
                    <fail>true</fail>
                    <cvssScoreThreshold>7.0</cvssScoreThreshold>
                </configuration>
            </plugin>

        </plugins>
    </build>


</project>
